--Aggregate functions

SELECT COUNT(*) FROM CUSTOMER
SELECT COUNT(CustomerId) FROM CUSTOMER
SELECT COUNT(DISTINCT City) FROM CUSTOMER
SELECT COUNT(City) as NumberOfCustomers FROM CUSTOMER 
SELECT COUNT(*) FROM CUSTOMER WHERE FirstName LIKE 'Ka%'

SELECT AVG(Age) FROM CUSTOMER
SELECT MIN(Age) FROM CUSTOMER
SELECT MAX(Age) FROM CUSTOMER
SELECT SUM(OrderAmount) as TotalRevenue FROM ORDERS

SELECT MAX(OrderAmount) as 'Max OrderAmount', 
	   MIN(OrderAmount) as 'Min OrderAmount', 
	   AVG(OrderAmount) as 'Average OrderAmount' 
FROM CUSTOMER

SELECT MIN(Age) FROM CUSTOMER WHERE AGE >= 25 
SELECT MAX(Age)-MIN(Age) FROM CUSTOMER

SELECT STDEV(Age) FROM CUSTOMER


--GROUP BY

SELECT YEAR(OrderDate) as Year, SUM(OrderAmount) as SumOrderAmount FROM ORDERS 
GROUP BY YEAR(OrderDate)

SELECT DATEPART(YEAR, OrderDate) as Year, DATEPART(MONTH, OrderDate) as Month,  COUNT(*) as NumOrders
FROM ORDERS
GROUP BY DATEPART(YEAR, OrderDate), DATEPART(MONTH, OrderDate)

SELECT DepartmentId, MAX(Salary) FROM EMPLOYEE GROUP BY DepartmentId 
ORDER BY MAX(Salary) DESC

SELECT City, DepartmentId, MAX(Salary) FROM EMPLOYEE 
GROUP BY City, DepartmentId 

SELECT DepartmentId, Gender, MAX(Salary) FROM EMPLOYEE 
GROUP BY DepartmentId, Gender 

--Having Clause 

SELECT City, COUNT (*) FROM CUSTOMER 
GROUP BY City HAVING COUNT(*)>=2;

SELECT Age, MAX(Age) FROM CUSTOMER GROUP BY Age HAVING FirstName LIKE 'Ka%'  --Error!

SELECT City, COUNT(CustomerID) FROM CUSTOMER 
GROUP BY City HAVING COUNT(CustomerId) > 1
ORDER BY COUNT(CustomerId) DESC;


--Window functions

SELECT *, MAX(Salary) OVER () AS MAX_SALARY FROM EMPLOYEE

SELECT *, MAX(Salary) OVER (PARTITION BY DepartmentId) AS MAX_SALARY FROM EMPLOYEE

SELECT *, ROW_NUMBER() 
OVER (PARTITION BY DepartmentId ORDER BY Salary DESC) AS rn FROM EMPLOYEE


SELECT *, ROW_NUMBER() 
OVER (PARTITION BY DepartmentId ORDER BY Salary DESC) AS rn FROM EMPLOYEE

SELECT *, RANK() 
OVER (ORDER BY Salary DESC) AS rnk FROM EMPLOYEE

SELECT *, RANK() 
OVER (PARTITION BY DepartmentId ORDER BY Salary DESC) AS rnk FROM EMPLOYEE


SELECT * FROM (
	SELECT *, RANK() 
	OVER (PARTITION BY DepartmentId ORDER BY Salary DESC) AS rnk FROM EMPLOYEE
)e WHERE e.rnk < 3

SELECT *, DENSE_RANK() 
OVER (ORDER BY Salary DESC) AS rnk FROM EMPLOYEE